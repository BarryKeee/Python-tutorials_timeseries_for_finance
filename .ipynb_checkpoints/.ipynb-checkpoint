{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Estimating Value-at-risk (VaR): S&P 500 Index. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial estimates value-at-risk for the S&P 500 Index. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Imports\n",
    "from __future__ import print_function, division\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import math\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### =True if accessing data remotely.\n",
    "access_yahoo = False\n",
    "\n",
    "if access_yahoo:\n",
    "    from distutils.version import StrictVersion\n",
    "    if StrictVersion(pd.__version__) >= StrictVersion('0.19'):\n",
    "        import pandas_datareader.data as web\n",
    "    else:\n",
    "        import pandas.io.data as web\n",
    "    \n",
    "    ### Keep 'adjusted close' prices only\n",
    "    tickers = ['^GSPC']\n",
    "    tickers_field = 'Adj Close' \n",
    "    tickers_tup = [(tickers_field, tic) for tic in tickers]\n",
    "\n",
    "    dfyf =  web.get_data_yahoo(tickers)  \n",
    "    dfyf_cp = dfyf.loc[:, tickers_tup]\n",
    "    dfyf_cp.columns = dfyf_cp.columns.droplevel()\n",
    "    dfyf_cp = dfyf_cp.asfreq('d').dropna()\n",
    "    \n",
    "    ### Save file to .csv\n",
    "    dfyf_cp.to_csv('YahooFinance_AdjClose_fullsample.csv')\n",
    "    dfyf_cp.rename(columns={'^GSPC':'S&P500'}, inplace=True)\n",
    "       \n",
    "else:\n",
    "    dfyf_cp = pd.read_csv('YahooFinance_AdjClose_fullsample.csv', index_col=['Date'])\n",
    "    dfyf_cp.index = pd.to_datetime(dfyf_cp.index)\n",
    "    dfyf_cp = dfyf_cp.asfreq('d').dropna()\n",
    "    dfyf_cp.rename(columns={'^GSPC':'S&P500'}, inplace=True)\n",
    "\n",
    "startdate = '1970-1-1'\n",
    "dfyf_cp = dfyf_cp.loc[startdate:, :]\n",
    "    \n",
    "display(dfyf_cp.info())\n",
    "display(multi_table([dfyf_cp.head(), dfyf_cp.tail()]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
